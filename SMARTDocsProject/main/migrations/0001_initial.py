# Generated by Django 2.0.7 on 2018-07-11 12:42

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import main.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('middle_name', models.CharField(blank=True, max_length=20)),
                ('photo', models.ImageField(blank=True, upload_to='avatars')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CuratorProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.CharField(max_length=100, verbose_name='Должность')),
                ('academic_title', models.CharField(max_length=100, verbose_name='Ученое звание')),
                ('user', models.OneToOneField(limit_choices_to=main.models.get_only_curators_q, on_delete=django.db.models.deletion.CASCADE, related_name='curator_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Дополнительная информация кураторов',
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('upload', models.FileField(unique=True, upload_to=main.models.filled_docs_directory_path, verbose_name='Файл загрузки')),
                ('uploading_date', models.DateField(auto_now=True)),
                ('student', models.ForeignKey(limit_choices_to=main.models.get_only_students_q, on_delete=django.db.models.deletion.CASCADE, related_name='documents', to=settings.AUTH_USER_MODEL, verbose_name='Студент')),
            ],
        ),
        migrations.CreateModel(
            name='DocumentTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_name', models.CharField(blank=True, max_length=100, verbose_name='Наименование документа')),
                ('upload', models.FileField(unique=True, upload_to='uploads/templates', verbose_name='Файл загрузки')),
                ('uploading_date', models.DateField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Practice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Наименование')),
                ('type_of', models.SmallIntegerField(choices=[(0, 'Практика в лаборатории института'), (1, 'Практика на предприятии')], default=0)),
                ('start_date', models.DateField(verbose_name='Дата начала практики')),
                ('address', models.CharField(max_length=200, verbose_name='Адрес прохождения практики')),
                ('end_date', models.DateField(verbose_name='Дата окончания практики')),
                ('institute', models.CharField(max_length=200, verbose_name='Институт')),
                ('faculty', models.CharField(blank=True, max_length=200, verbose_name='Факультет')),
                ('curator', models.ForeignKey(limit_choices_to=main.models.get_only_curators_q, on_delete=django.db.models.deletion.CASCADE, related_name='practices', to=settings.AUTH_USER_MODEL, verbose_name='Куратор')),
            ],
        ),
        migrations.CreateModel(
            name='Storage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('content', models.TextField()),
                ('student', models.ForeignKey(limit_choices_to=main.models.get_only_students_q, on_delete=django.db.models.deletion.CASCADE, related_name='practice_diary', to=settings.AUTH_USER_MODEL, verbose_name='Студент')),
            ],
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name_plural': 'Дополнительная информация студентов',
            },
        ),
        migrations.CreateModel(
            name='StudyGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course', models.CharField(max_length=15, verbose_name='Курс группы')),
                ('group_number', models.CharField(max_length=15, unique=True, verbose_name='Номер группы')),
            ],
            options={
                'verbose_name_plural': 'Студенческие группы',
            },
        ),
        migrations.AddField(
            model_name='studentprofile',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group_student_profiles', to='main.StudyGroup'),
        ),
        migrations.AddField(
            model_name='studentprofile',
            name='user',
            field=models.OneToOneField(limit_choices_to=main.models.get_only_students_q, on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to=settings.AUTH_USER_MODEL),
        ),
    ]
